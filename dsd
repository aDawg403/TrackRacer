[33mcommit fb95dd2075c7c7c2c1a22e1af3083e7498aa875a[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: aDawg403 <aiwanisz@ucalgary.ca>
Date:   Thu Oct 12 10:57:11 2017 -0600

    Remove GameController class and update tests

[1mdiff --git a/Driver.java b/Driver.java[m
[1mindex 19d6be1..8feb8d7 100644[m
[1m--- a/Driver.java[m
[1m+++ b/Driver.java[m
[36m@@ -29,12 +29,18 @@[m [mStarting execution point.[m
 [m
 public class Driver//main function that determines if the SUV or sports car has won [m
 {[m
[32m+[m	[32mstatic int starter=0;[m
[32m+[m	[32mstatic DesertTrack aDes = new DesertTrack();[m
[32m+[m	[32mstatic ArcticTrack anArc = new ArcticTrack();[m[41m [m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
   public static void main(String [] args)[m
   {[m
[31m-	GameController aGameController = new GameController();[m
 	SUV anSUV = new SUV();[m
 	Sports aSport = new Sports();[m
[31m-	int result = aGameController.playGame(aGameController, anSUV, aSport);[m
[32m+[m	[32mint result = playGame(anSUV, aSport);[m
 	if(result ==1)[m
 		System.out.println("The SUV has won");[m
 	else if (result ==2)[m
[36m@@ -42,5 +48,61 @@[m [mpublic class Driver//main function that determines if the SUV or sports car has[m
 	else[m
 		System.out.println();[m
 	}[m
[31m-  }[m
[32m+[m[41m  [m
[32m+[m	[32mpublic static void printInstructions(){//prints overview of the game[m[41m [m
[32m+[m		[32mSystem.out.println("This is racing simulation with two separate driving tracks: arctic and desert. For this version of the program the arctic track contains");[m
[32m+[m		[32mSystem.out.println("an SUV (Sport Utility Vehicle) and the desert track contains a sports car. Each car will try to reach the end of its respective track without");[m
[32m+[m		[32mSystem.out.println("running out of fuel and prior to the other car (see Figure 1). If either or both cars reach the end of the track then the simulation ends: ");[m
[32m+[m		[32mSystem.out.println("draw (if both reach it during the same turn), win (for the car that reached it first), and loss (for the car that didn't reach it first). ");[m
[32m+[m		[32mSystem.out.println("If one car runs out of fuel then the simulation continues until: both cars run out fuel (tie) or the other car reaches the end (win for that car).");[m
[32m+[m		[32mSystem.out.println("The simulation is also a 'draw' if the user quits the program early.");[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32mpublic static int playGame(SUV mySUV, Sports mySport)// plays the game, determines when the car runs out of fuel[m[41m [m
[32m+[m	[32m{[m[41m [m
[32m+[m		[32m  boolean sportsWon=false;[m
[32m+[m		[32m  boolean suvWon=false;[m
[32m+[m		[32m  printInstructions();[m
[32m+[m		[32m  while (starter==0)[m
[32m+[m		[32m  {[m
[32m+[m			[32m  anArc.setNewPlace(mySUV);[m
[32m+[m			[32m  aDes.setNewPlace(mySport);[m
[32m+[m			[32m  anArc.display();[m
[32m+[m			[32m  aDes.display();[m
[32m+[m			[32m  if (starter==2){[m
[32m+[m				[32m  break;[m[41m [m
[32m+[m			[32m  }[m
[32m+[m			[32m  mySUV.turn();[m
[32m+[m			[32m  mySport.turn();[m[41m [m
[32m+[m			[32m  if (mySport.getFuel() <= 1){[m
[32m+[m				[32m  starter=1;[m
[32m+[m				[32m  return 1; }[m
[32m+[m			[32m  if (mySUV.getFuel() <= 2){[m
[32m+[m				[32m  starter=1;[m
[32m+[m				[32m  return 2;[m
[32m+[m			[32m  }[m
[32m+[m		[32m  }[m
[32m+[m	[32m     if ((suvWon)&& (sportsWon==false)){[m
[32m+[m	[41m    [m	[32m  return 1;[m
[32m+[m	[32m      }[m
[32m+[m	[32m      else if ((sportsWon)&&(suvWon==false)){[m
[32m+[m	[41m    [m	[32m  return 2;[m
[32m+[m	[32m      }[m
[32m+[m	[32m      else{[m
[32m+[m	[41m    [m	[32m  return 3;[m[41m [m
[32m+[m	[32m      }[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m	[32mpublic static void setStarter(int start){//changes the starter to break out of loop when needed[m
[32m+[m		[32mstarter=start;[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m }[m
 [m

[33mcommit b5a84d21e50bcc140fcb7fd2232923039a3fe2e0[m
Author: aDawg403 <aiwanisz@ucalgary.ca>
Date:   Wed Oct 4 23:20:35 2017 -0600

    test

[1mdiff --git a/Driver.java b/Driver.java[m
[1mnew file mode 100644[m
[1mindex 0000000..19d6be1[m
[1m--- /dev/null[m
[1m+++ b/Driver.java[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32mAuthor:  Lillian Iwaniszyn T01[m
[32m+[m[32mVersion: March 26, 2015[m
[32m+[m[32mProgram Features include:[m
[32m+[m[32mDisplays an introduction to the program that describes the rules. It only displays these instructions right after the program is run. The exact content of the instructions are left to your discretion but it should be sufficient to instruct the user how to run the program.[m
[32m+[m[32mDisplays an appropriate status message when the program ends e.g., "SUV reached the end first", "quitting before the simulation ended" etc.[m
[32m+[m[32mDisplays the appropriate menu for the SUV and sports car movement.[m
[32m+[m[32mGets user input for the SUV and sports car menu and repeats prompts until valid input is entered.[m
[32m+[m[32mProgram runs until the user quits.[m
[32m+[m[32mEach track is properly initialized and displayed at the appropriate time when the program runs.[m
[32m+[m[32mSUV can move and consume fuel as specified in the class description (non-AWD mode).[m
[32m+[m[32mSports car can move and consume fuel as specified in the class description.[m
[32m+[m[32mArctic track can randomly generate and properly handle the effects of a blizzard on the SUV (regular mode).[m
[32m+[m[32mAWD mode working properly during a blizzard[m[41m [m
[32m+[m[32mDesert track can randomly generate and properly handle the effects of a heat wave on the sports car[m
[32m+[m[32mProgram can determine when one or both cars have reached the end[m
[32m+[m
[32m+[m[32mProgram limitations include:[m
[32m+[m[32mNot having the cheat menu invoked[m
[32m+[m[32mThe Sports Car will always win, especially since the cheat menu doesnt work and we cannot change the location or fuel of any car.[m[41m [m
[32m+[m
[32m+[m[32mStarting execution point.[m
[32m+[m
[32m+[m[32m*/[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class Driver//main function that determines if the SUV or sports car has won[m[41m [m
[32m+[m[32m{[m
[32m+[m[32m  public static void main(String [] args)[m
[32m+[m[32m  {[m
[32m+[m	[32mGameController aGameController = new GameController();[m
[32m+[m	[32mSUV anSUV = new SUV();[m
[32m+[m	[32mSports aSport = new Sports();[m
[32m+[m	[32mint result = aGameController.playGame(aGameController, anSUV, aSport);[m
[32m+[m	[32mif(result ==1)[m
[32m+[m		[32mSystem.out.println("The SUV has won");[m
[32m+[m	[32melse if (result ==2)[m
[32m+[m		[32mSystem.out.println("The sports car has won");[m
[32m+[m	[32melse[m
[32m+[m		[32mSystem.out.println();[m
[32m+[m	[32m}[m
[32m+[m[32m  }[m
[32m+[m
